- name: expand lua module versions
  shell: "echo {{ item }}-*"
  register: _lua_modules
  args:
    chdir: "{{ openresty_version_build_path }}/bundle"
  with_items: "{{ lua_modules }}"

- name: create lualib directory
  file:
    path: "{{ openresty_build_path }}/destdir/usr/local/openresty/lualib"
    state: directory

- name: install lua-module
  command: >-
    make all install
      DESTDIR={{ openresty_build_path }}/destdir
      LUA_LIB_DIR=/usr/local/openresty/lualib
  args:
    chdir: "{{ openresty_version_build_path }}/bundle/{{ item.stdout }}"
  with_items: "{{ _lua_modules.results }}"
  loop_control:
    label: "{{ item.stdout }}"

- name: create bytecode directory
  file:
    path: "{{ openresty_build_path }}/bytecode"
    state: directory

- name: find lua files to be compiled to bytecode
  command: >
    find {{ item.find }} -printf "%P\n"
  args:
    warn: false
    chdir: "{{ item.chdir }}"
  register: _bytecode_src
  with_items:
  - chdir: "{{ openresty_version_build_path }}/bundle/{{ _luajit_dir.stdout }}/src"
    find: -path ./jit/*.lua
  - chdir: "{{ openresty_build_path }}/destdir/usr/local/openresty/lualib"
    find: -name *.lua

- name: compile LuaJIT bytecode
  command: >-
    {{ compile_bytecode }} -n {{ luajit_module_item_name }}
    {{ item.1 }} {{ openresty_build_path }}/bytecode/{{ luajit_module_item_name }}.o
  args:
    chdir: "{{ item.0.item.chdir }}"
  with_subelements:
  - "{{ _bytecode_src.results }}"
  - stdout_lines
  loop_control:
    label: "{{ luajit_module_item_name }}"

- name: make bytecode.a
  shell: "ar rcus libbytecode.a bytecode/*.o"
  args:
    chdir: "{{ openresty_build_path }}"

- name: set nginx ld-opt
  set_fact:
    _ngx_ld_opt: "{{ _ngx_ld_opt|default('') }} -L{{ openresty_build_path }} -Wl,--whole-archive -lbytecode -Wl,--no-whole-archive"
